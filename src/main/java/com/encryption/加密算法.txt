概述
    数据加密的基本过程就是对原来为明文的文件或数据按某种算法进行处理，使其成为不可读的一段代码，通常称为“密文”，使其只能在输入相应的密钥之后才能显示出本来内容，
    通过这样的途径来达到保护数据不被非法人窃取、阅读的目的。 该过程的逆过程为解密，即将该编码信息转化为其原来数据的过程。加密建立在对信息进行数学编码和解码的基础上。
    加密类型分为两种，对称加密与非对称加密，对称加密双方采用共同密钥。非对称加密，这种加密方式存在两个密钥，一个是公共密钥（对外公开），一种是私人密钥（对外保密）。


一、摘要算法

    摘要算法又称哈希算法，它表示输入任意长度的数据，输出固定长度的数据，相同的输入数据始终得到相同的输出，不同的输入数据尽量得到不同的输出。
    Java中的Object.hashCode()方法就是一个摘要算法，它可以输入任意数据，它的输出是一个int类型，即4个字节的固定长度数据，同时，相同的输入会得到相同的输出，这也是重写equals方法必须重写hashCode方法的原因。
    由于输出的长度是固定且输出的长度是不固定的，意味着两个不同的输入可能得到相同的输出，这就是碰撞问题。这就要求在设计Hash算法时，尽量使得碰撞率低，而且不能猜测输出，
    例如：hash("java1")="123456",hash("java2")="123457"，那么我们就可以猜测出hash("java3")="123458"，也就是说一个安全的hash算法很难从输出反推输入，只能依靠暴力穷举。

    目前常用的摘要算法：
        算法	输出长度
        MD5	128bit
        SHA-1	160bit
        SHA-256	256bit
        安全性方面，显然SHA256（又称SHA2）的安全性最高，但是耗时要比其他两种多很多。MD5相对较容易碰撞，因此，SHA1应该是这三种中性能最好的一款加密算法。


二、对称加密 & 非对称加密



SSL介绍：

    安全套接字（Secure Socket Layer，SSL）协议是Web浏览器与Web服务器之间安全交换信息的协议，提供两个基本的安全服务：鉴别与保密。
    SSL是Netscape于1994年开发的，后来成为了世界上最著名的web安全机制，所有主要的浏览器都支持SSL协议
    目前有三个版本：2、3、3.1，最常用的是第3版，是1995年发布的。

SSL协议的三个特性

    ① 保密：在握手协议中定义了会话密钥后，所有的消息都被加密。

    ② 鉴别：可选的客户端认证，和强制的服务器端认证。

    ③ 完整性：传送的消息包括消息完整性检查（使用MAC）。

SSL的工作原理 https://www.cnblogs.com/chuanzi/p/11041745.html

    握手协议（Handshake protocol）

    记录协议（Record protocol）

    警报协议（Alert protocol）


    1、握手协议

    握手协议是客户机和服务器用SSL连接通信时使用的第一个子协议，握手协议包括客户机与服务器之间的一系列消息。SSL中最复杂的协议就是握手协议。
    该协议允许服务器和客户机相互验证，协商加密和MAC算法以及保密密钥，用来保护在SSL记录中发送的数据。握手协议是在应用程序的数据传输之前使用的。

    每个握手协议包含以下3个字段
        （1）Type：表示10种消息类型之一
        （2）Length：表示消息长度字节数
        （3）Content：与消息相关的参数

    握手协议的4个阶段：
        1.1建立安全能力
            SSL握手的第一阶段启动逻辑连接，建立这个连接的安全能力。首先客户机向服务器发出client hello消息并等待服务器响应，随后服务器向客户机返回server hello消息，
            对client hello消息中的信息进行确认。Client hello消息包括Version，Random，Session id，Cipher suite，Compression method等信息。

             ClientHello 客户发送CilentHello信息，包含如下内容：
            （1）客户端可以支持的SSL最高版本号
            （2）一个用于生成主秘密的32字节的随机数。（等会介绍主秘密是什么）
            （3）一个确定会话的会话ID。
            （4）一个客户端可以支持的密码套件列表。
                密码套件格式：每个套件都以“SSL”开头，紧跟着的是密钥交换算法。用“With”这个词把密钥交换算法、加密算法、散列算法分开，
                例如：SSL_DHE_RSA_WITH_DES_CBC_SHA,表示把DHE_RSA(带有RSA数字签名的暂时Diffie-HellMan)定义为密钥交换算法；把DES_CBC定义为加密算法；把SHA定义为散列算法。
            （5）一个客户端可以支持的压缩算法列表。

             ServerHello 服务器用ServerHello信息应答客户，包括下列内容
            （1）一个SSL版本号。取客户端支持的最高版本号和服务端支持的最高版本号中的较低者。
            （2）一个用于生成主秘密的32字节的随机数。（客户端一个、服务端一个）
            （3）会话ID
            （4）从客户端的密码套件列表中选择的一个密码套件
            （5）从客户端的压缩方法的列表中选择的压缩方法

            这个阶段之后，客户端服务端知道了下列内容：

            （1）SSL版本
            （2）密钥交换、信息验证和加密算法
            （3）压缩方法
            （4）有关密钥生成的两个随机数。

        1.2 服务器鉴别与密钥交换

            服务器启动SSL握手第2阶段，是本阶段所有消息的唯一发送方，客户机是所有消息的唯一接收方。该阶段分为4步：
            （a）证书：服务器将数字证书和到根CA整个链发给客户端，使客户端能用服务器证书中的服务器公钥认证服务器。
            （b）服务器密钥交换（可选）：这里视密钥交换算法而定
            （c）证书请求：服务端可能会要求客户自身进行验证。
            （d）服务器握手完成：第二阶段的结束，第三阶段开始的信号



HTTPS协议中身份认证的部分是由数字证书来完成的，证书由公钥、证书主体和数字签名等内容组成

在客户端发起SSL请求后，服务端会将数字证书发给客户端，客户端会对证书进行验证（验证查看这张证书是否是伪造的，也就是公钥是否是伪造的），并获取公钥。

数字证书有两个作用：

1.身份授权：确保浏览器访问的网站是经过CA验证的可信任的网站。
2.分发公钥：每个数字证书都包含了注册者生成的公钥（验证确保是合法的，非伪造的公钥）。在SSL握手时会通过certificate消息传输给客户端。


证书申请流程：

1.服务器的运营人员向数字证书认证机构提出公钥的申请（信息包括：域名唯一标识和非对称秘钥的公钥等）。
2.RA（证书注册及审核机构）检查实体的合法性。如果个人或者小网站，这一步不是必须的。
3.CA（证书签发机构）数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起。
4.证书更新到repository（负责数字证书及CRL内容存储和分发），终端后续从repository更新证书，查询证书状态等。

证书认证流程：

1.服务器会将这份由数字证书认证机构颁发的公钥证书发送给客户端，以进行公开密钥加密方式通信。公钥证书也可叫做数字证书或直接称为证书。
2.接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，客户端便可明确两件事：一，认证服务器的公开密钥的是真实有效的数字证书认证机构。二，服务器的公开密钥是值得信赖的。
3.此处认证机关的公开密钥必须安全地转交给客户端。使用通信方式时，如何安全转交是一件很困难的事，因此，多数浏览器开发商发布版本时，会事先在内部植入常用认证机关的公开密钥。
数字签名的制作和验证过程如下：

数字签名的签发：首先是使用哈希函数对待签名内容进行安全哈希，生成消息摘要，然后使用CA自己的私钥对消息摘要进行加密。
数字签名的校验：使用CA的公钥解密签名，然后使用相同的签名函数对待签名证书内容进行签名并和服务端数字签名里的签名内容进行比较，如果相同就认为校验成功。

